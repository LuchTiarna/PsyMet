{
    "collab_server" : "",
    "contents" : "#'@name multifit\n#'@rdname multifit\n#'@aliases\n#'fit\n#'@title MultiFit\n#'@description\n#'Generates multiple functions with multiple parametres on same data you are able to adjust noise properties.\n#'\n#'@param origins lists of functions and their parametres\n#'@param levels  levels stimuli\n#'@param trials\n#'\n#'@return data.frame with all values with distinguished origin functions and their parametres\nNULL\n#'@rdname multifit\n#'@export\n#'\n#'\n\nmultifit <- function(fitted, fitters)\n{\n  if(!is.list(fitters)){\n    stop(\"Origins has to be a list.\")\n  }\n\n  #if(length(levels) != length(trials)){\n  #  stop(\"Every level must have defined number of trials\")\n  #}\n\n  results <- NULL\n  id <- 0\n\n  for(n in 1:nrow(fitted)){\n    for(fitter in fitters){\n      id <- id + 1\n\n      params <- formals(fitter[[2]])\n      params <- params[-1]\n\n      fitData <- fitted$data[[n]]\n\n      if(is.character(fitter[[1]])){\n        sigmoidName <- fitter[[1]]\n      }else{\n        sigmoid <- fitter[[1]]\n        sigmoidName <- as.character(substitute(sigmoid))\n      }\n\n      if(is.character(fitter[[2]])){\n        coreName <- fitter[[2]]\n      }else{\n        core <- eval(fitter[[2]])\n        coreName <- as.character(substitute(core))\n      }\n\n      paramNames <- \"\"\n      for(l in 1:length(params)){\n        paramNames <- paste(paramNames, paste(\"param\", as.character(l), sep=\".\"), sep=\", \")\n      }\n\n      fitFormula <- paste(\"simulatedHitPercentage ~ gama + (1 - gama - lambda) * \", sigmoidName, \".orig.cdf\", \"(\", coreName, \".orig.cdf\", \"(\", \"level\", paramNames ,\")\",\")\", sep=\"\")\n\n      tryCatch({\n        fit <- NULL\n        fit <- nls( formula = as.formula(fitFormula), data=fitData, lower=c(gama=0, lambda=0),upper=c(gama = 1, lambda = 1), algorithm = \"port\")\n      },error = function(e){fit <- NULL})\n\n      if(is.null(fit)){\n        next\n      }\n\n      responses <- unnest(fitted[n,], data)\n      responses$fitedHitPercentage <- predict(fit, responses$level)\n\n      responses$id <- rep(id, nrow(responses))\n      responses$fitSigmoid <-  rep(fitter[1],nrow(responses))\n      responses$fitCore <-  rep(fitter[2],nrow(responses))\n\n      params <- fit$m$getPars()\n\n      responses$fitGamma <- rep(params[[1]], nrow(responses))\n      responses$fitLambda <- rep(params[[2]], nrow(responses))\n      for(i in 3:length(params))\n      {\n        responses[[paste(\"fitParam\", as.character(i-2), sep=\"\")]] <-  rep(params[[i]], nrow(responses))\n      }\n\n      if(is.null(results)){\n        results <- nest(responses, c(level, obsNumber, hitPercentage, simulatedHitPercentage, fitedHitPercentage))\n      }else{\n        row <- nest(responses, c(level, obsNumber, hitPercentage, simulatedHitPercentage, fitedHitPercentage))\n        results <-bind_rows(results, row)\n      }\n      }\n  }\n  return(results)\n}\n",
    "created" : 1519026733926.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4068567057",
    "id" : "D35696D0",
    "lastKnownWriteTime" : 1519642534,
    "last_content_update" : 1519642534636,
    "path" : "~/Bakalarka/PsyMet/R/multifit.R",
    "project_path" : "R/multifit.R",
    "properties" : {
        "source_window_id" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}